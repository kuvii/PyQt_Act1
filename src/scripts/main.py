# this file is generated by pyuic5
# this program executes the main window of the application
# interpretation of the ui file xml


# --------------------------------------------------- IMPORTANT ---------------------------------------------------
# Folders *logs, *encryptedData is created automatically in case of not existing
# Files *clave.hash, *acceso.log is created automatically in case of not existing

# DO NOT DELETE -> 
# Form.ui, debianIcon.png or the program wont work

# Author: Aday E. Vera Ayala
# Finished Date: 13/12/2022


# import the necessary packages and libraries
from PyQt5 import QtWidgets, uic, QtGui
from datetime import datetime
import os, sys

#Messages
MSG_LOGIN_OK = 'Correcto'
MSG_LOGIN_FAILED = 'Incorrecto'

# Folders Paths
FOLDER_SRC = './src'
FOLDER_DESIGNS_PATH = FOLDER_SRC + '/designs'
FOLDER_IMAGES_PATH = FOLDER_SRC + '/images'
FOLDER_ENCRYPTED_DATA_PATH = FOLDER_SRC + '/encryptedData'
FOLDER_LOGS_PATH = FOLDER_SRC +'/logs'

#Config (DO NOT CHANGE)
UI_FILE_PATH = FOLDER_DESIGNS_PATH + '/Form.ui'
EXPORT_FILE_PATH = FOLDER_LOGS_PATH + '/acceso.log'
ENCRYPTED_FILE_PATH = FOLDER_ENCRYPTED_DATA_PATH + '/clave.hash'

# Window Config
IMAGE_PATH = FOLDER_IMAGES_PATH + '/debianIcon.png'
WINDOW_NAME = 'Login'

    # - Styles
RED_STYLE = 'color: rgb(255, 0, 0);'

#User Data
CORRECT_USER = 'admin'
CORRECT_PASSWORD = '1234'

class Ui(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui, self).__init__()
        # load the ui file created with Qt Designer 'nameOfFile.ui'
        uic.loadUi(UI_FILE_PATH, self)
        
        #Window Config
        self.setWindowIcon(QtGui.QIcon(IMAGE_PATH))
        self.setWindowTitle(WINDOW_NAME)
        self.setStyleSheet(RED_STYLE)
        
        # connect the buttons to the functions
        self.pushbutton_login.clicked.connect(self.login) # Login Button
        
        # última línea
        self.show()

    #Methods
    def login(self):
        usedUser = self.lineEdit_user.text()
        usedPassw = self.lineEdit_password.text()
        msg = ''
        if usedUser == CORRECT_USER and usedPassw == CORRECT_PASSWORD:
            self.label_output.setText(MSG_LOGIN_OK)

            encryptedPass = encrypt(CORRECT_PASSWORD)
            fileManager().passFileWrite(encryptedPass)
            msg = MSG_LOGIN_OK
        else:
            msg = MSG_LOGIN_FAILED
            self.label_output.setText(MSG_LOGIN_FAILED)
            
        fileManager().createLog(usedUser, usedPassw, msg)
    
class fileManager():
    if not os.path.exists(FOLDER_ENCRYPTED_DATA_PATH):
        os.makedirs(FOLDER_ENCRYPTED_DATA_PATH)
    
    if not os.path.exists(ENCRYPTED_FILE_PATH):
            with open(ENCRYPTED_FILE_PATH, "w+") as fp:
                fp.write('')
        
    passwordFile = open(ENCRYPTED_FILE_PATH, "r+")
    
    def passFileWrite(self, data):
        if not os.path.exists(FOLDER_ENCRYPTED_DATA_PATH):
            os.makedirs(FOLDER_ENCRYPTED_DATA_PATH)
        self.passwordFile.truncate(0)
        self.passwordFile.write(data)
        
    def passFileRead(self):
        return self.passwordFile.readline()
    
    def createLog(self, user, passw, msg):
        if not os.path.exists(FOLDER_LOGS_PATH):
            os.makedirs(FOLDER_LOGS_PATH)
        if not os.path.exists(EXPORT_FILE_PATH):
            with open(EXPORT_FILE_PATH, "w+") as fp:
                fp.write('')
                
        logFile = open(EXPORT_FILE_PATH, "r+")
        date = datetime.now().strftime("%Y-%m-%d, %H:%M:%S")
        logFile.write(user + " " + passw + " " + msg + " " + date + " \n")
        logFile.readlines()


def encrypt(strPassw):
    from hashlib import md5
    encryptedPassword = md5(strPassw.encode("utf-8")).hexdigest()
    return encryptedPassword


def suppress_qt_warnings():
    
    os.environ["QT_DEVICE_PIXEL_RATIO"] = "0"
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    os.environ["QT_SCREEN_SCALE_FACTORS"] = "1"
    os.environ["QT_SCALE_FACTOR"] = "1"


if __name__ == '__main__':
    # suppress_qt_warnings()
    app = QtWidgets.QApplication(sys.argv)
    window = Ui()
    app.exec_()